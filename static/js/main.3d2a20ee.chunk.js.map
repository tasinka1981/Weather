{"version":3,"sources":["Components/Tab.module.css","img/wind.svg","img/sun.svg","img/gps.svg","Components/CurrentLocation.module.css","Components/InputCurrent.module.css","Components/App.module.css","Components/InputCurrent.js","Components/CurrentLocation.js","Components/Tab.js","Components/App.js","serviceWorker.js","index.js"],"names":["module","exports","mainConteiner","conteinerWeather","containerMoreDay","containerOneDay","containerToday","flex","currentOn","forecastOff","currentOff","forecastOn","textOn","date","text","map","__webpack_require__","p","container","city","icon","gps","data","time","wind","sun","input","header","wrapLoader","wrap","InputCurrent","_ref","sendValue","react_default","a","createElement","className","style","src","alt","value","onSubmit","type","name","placeholder","CurrentLocation","Tab","currentIcon","currentTemp","forecast","humidity","onButtonToday","onButtonForecast","buttonForecast","buttonToday","Fragment","onClick","textOff","containerCurrent","i","day","condition","avgtemp_c","avghumidity","maxwind_mph","App","state","isLoading","cityName","numForecastDay","handleButtonToday","_this","setState","handleButtonForecast","handleSubmit","evt","preventDefault","newValue","target","console","log","_this2","this","_this$state","URL","concat","axios","get","then","res","temp_c","current","iconUrl","forecastday","location","localtime","slice","wind_kph","catch","err","error","prevProps","prevState","_this3","prevCity","currentCity","_this$state2","_this$state3","s","react_loader_spinner_default","color","height","width","margin","Components_InputCurrent","changeValue","handleChange","Components_CurrentLocation","Components_Tab","Component","Boolean","window","hostname","match","ReactDOM","render","Components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3d2a20ee.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainConteiner\":\"Tab_mainConteiner__2NIZA\",\"conteinerWeather\":\"Tab_conteinerWeather__3JGJu\",\"containerMoreDay\":\"Tab_containerMoreDay__1rIcc\",\"containerOneDay\":\"Tab_containerOneDay__2s2Ws\",\"containerToday\":\"Tab_containerToday__2vEFH\",\"flex\":\"Tab_flex__okYWt\",\"currentOn\":\"Tab_currentOn__29Kq6\",\"forecastOff\":\"Tab_forecastOff__1_W3T\",\"currentOff\":\"Tab_currentOff__txVnp\",\"forecastOn\":\"Tab_forecastOn__3gPBB\",\"textOn\":\"Tab_textOn__3Rfc8\",\"date\":\"Tab_date__2HuBB\",\"text\":\"Tab_text__lTwiA\",\"map\":\"Tab_map__JZeDd\"};","module.exports = __webpack_public_path__ + \"static/media/wind.31619654.svg\";","module.exports = __webpack_public_path__ + \"static/media/sun.4cb5efd6.svg\";","module.exports = __webpack_public_path__ + \"static/media/gps.b6ab5480.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"CurrentLocation_container__1gLzv\",\"city\":\"CurrentLocation_city__13WKU\",\"icon\":\"CurrentLocation_icon__2wk4s\",\"gps\":\"CurrentLocation_gps__2Pd1o\",\"data\":\"CurrentLocation_data__2Dcwl\",\"date\":\"CurrentLocation_date__bpSM2\",\"time\":\"CurrentLocation_time__291yU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"InputCurrent_container__2XE33\",\"wind\":\"InputCurrent_wind__3X95t\",\"sun\":\"InputCurrent_sun__1scW8\",\"input\":\"InputCurrent_input__1xgAI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainConteiner\":\"App_mainConteiner__2Am1W\",\"header\":\"App_header__271We\",\"wrapLoader\":\"App_wrapLoader__1wOM3\",\"wrap\":\"App_wrap__2LDIx\"};","import React from \"react\";\r\nimport style from \"./InputCurrent.module.css\";\r\nimport wind from \"../img/wind.svg\";\r\nimport sun from \"../img/sun.svg\";\r\n\r\nconst InputCurrent = ({ sendValue }) => (\r\n  <div className={style.container}>\r\n    <img src={sun} className={style.sun} alt=\"sun\" />\r\n    <form className={style.value} onSubmit={sendValue}>\r\n      <input\r\n        className={style.input}\r\n        type=\"text\"\r\n        name=\"city\"\r\n        placeholder=\"Enter city\"\r\n      />\r\n    </form>\r\n\r\n    <img src={wind} className={style.wind} alt=\"wind\" />\r\n  </div>\r\n);\r\n\r\nexport default InputCurrent;\r\n","import React from \"react\";\r\nimport style from \"./CurrentLocation.module.css\";\r\nimport gps from \"../img/gps.svg\";\r\nimport Moment from \"moment\";\r\n\r\nconst CurrentLocation = ({ date, time, city }) => (\r\n  <div className={style.container}>\r\n    <div className={style.icon}>\r\n      <img src={gps} className={style.gps} alt=\"gps\" />\r\n    </div>\r\n    <div className={style.data}>\r\n      <p className={style.city}>{city}</p>\r\n      <p className={style.date}>{date}</p>\r\n      <p className={style.time}>{time}</p>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default CurrentLocation;\r\n","import React from \"react\";\r\nimport style from \"./Tab.module.css\";\r\n\r\nconst Tab = ({\r\n  currentIcon,\r\n  currentTemp,\r\n  forecast,\r\n  wind,\r\n  humidity,\r\n  onButtonToday,\r\n  onButtonForecast,\r\n  buttonForecast,\r\n  buttonToday\r\n}) => (\r\n  <div className={style.mainConteiner}>\r\n    {buttonToday && (\r\n      <>\r\n        <div className={style.flex}>\r\n          <div className={style.currentOn} onClick={onButtonToday}>\r\n            <p className={style.textOn}>CURRENT WEATHER</p>\r\n          </div>\r\n          <div className={style.forecastOff} onClick={onButtonForecast}>\r\n            <p className={style.textOff}>FORECAST</p>\r\n          </div>\r\n        </div>\r\n        <div className={style.conteinerWeather}>\r\n          <div className={style.containerCurrent}>\r\n            <div className={style.containerToday}>\r\n              <img src={currentIcon} alt=\"icon\" />\r\n              <p>\r\n                <span className={style.text}>temperature: </span>\r\n                {currentTemp} °С\r\n              </p>\r\n              <p>\r\n                <span className={style.text}>humidity: </span>\r\n                {humidity}\r\n              </p>\r\n              <p>\r\n                <span className={style.text}>wind: </span>\r\n                {wind} м/с\r\n              </p>\r\n            </div>\r\n          </div>\r\n          <div className={style.map}> </div>\r\n        </div>\r\n      </>\r\n    )}\r\n    {buttonForecast && (\r\n      <>\r\n        <div className={style.flex}>\r\n          <div className={style.currentOff} onClick={onButtonToday}>\r\n            <p className={style.textOff}>CURRENT WEATHER</p>\r\n          </div>\r\n          <div className={style.forecastOn} onClick={onButtonForecast}>\r\n            <p className={style.textOn}>FORECAST</p>\r\n          </div>\r\n        </div>\r\n        <div className={style.conteinerWeather}>\r\n          <div>\r\n            <ul className={style.containerMoreDay}>\r\n              {forecast.map(i => (\r\n                <li className={style.containerOneDay}>\r\n                  <p className={style.date}>{i.date}</p>\r\n                  <img src={i.day.condition.icon} alt=\"icon\" />\r\n                  <p>\r\n                    <span className={style.text}>temperature:</span>\r\n                    {i.day.avgtemp_c} °С\r\n                  </p>\r\n                  <p>\r\n                    <span className={style.text}>humidity: </span>\r\n                    {i.day.avghumidity}\r\n                  </p>\r\n                  <p>\r\n                    <span className={style.text}>wind: </span>\r\n                    {i.day.maxwind_mph} м/с\r\n                  </p>\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </>\r\n    )}\r\n  </div>\r\n);\r\nexport default Tab;\r\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport s from \"./App.module.css\";\nimport InputCurrent from \"./InputCurrent\";\nimport CurrentLocation from \"./CurrentLocation\";\nimport Tab from \"./Tab\";\nimport Loader from \"react-loader-spinner\";\n// import Moment from \"moment\";\n// import Time from \"./Time\";\n\nconst WEATHER_KEY = \"8ea95289162543ccb8283504192204\";\n\nclass App extends Component {\n  state = {\n    text: \"\",\n    isLoading: true,\n    cityName: \"Kiev\",\n    numForecastDay: 5,\n    buttonToday: true,\n    buttonForecast: false\n  };\n  handleButtonToday = () => {\n    this.setState({ buttonToday: true, buttonForecast: false });\n  };\n\n  handleButtonForecast = () => {\n    this.setState({ buttonToday: false, buttonForecast: true });\n  };\n\n  // handleChange = e => {\n  //   this.setState({ text: e.target.value });\n  // };\n  handleSubmit = evt => {\n    evt.preventDefault();\n    // this.setState({ text: e.target.value }\n    const newValue = evt.target.city.value;\n    console.log(newValue);\n    this.setState({ cityName: newValue });\n  };\n\n  componentDidMount() {\n    const { cityName, numForecastDay, isLoading } = this.state;\n    const URL = `http://api.apixu.com/v1/forecast.json?key=${WEATHER_KEY}&q=${cityName}&days=${numForecastDay}`;\n    axios\n      .get(URL)\n      .then(res => {\n        return res.data;\n      })\n      .then(data => {\n        console.log(data);\n        // console.log(typeOf (data.location.localtime);\n        this.setState({\n          isLoading: false,\n          temp_c: data.current.temp_c,\n          iconUrl: data.current.condition.icon,\n          forecastday: data.forecast.forecastday,\n          time: data.location.localtime.slice(11, 17),\n          date: data.location.localtime.slice(0, 11),\n          humidity: data.current.humidity,\n          wind: data.current.wind_kph\n        });\n        // let now = Moment();\n        // Moment.lang(\"ru\");\n        // console.log(now.format(\"LTS\"));\n      })\n      .catch(err => {\n        if (err) console.error(\"Cannot fetch Weather Data from API\", err);\n      });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const prevCity = prevState.cityName;\n    const currentCity = this.state.cityName;\n    console.log(prevCity);\n    console.log(currentCity);\n    if (currentCity !== prevCity) {\n      const { cityName, numForecastDay } = this.state;\n      const URL = `http://api.apixu.com/v1/forecast.json?key=${WEATHER_KEY}&q=${cityName}&days=${numForecastDay}`;\n      axios\n        .get(URL)\n        .then(res => {\n          return res.data;\n        })\n        .then(data => {\n          console.log(data);\n\n          this.setState({\n            isLoading: false,\n            temp_c: data.current.temp_c,\n            iconUrl: data.current.condition.icon,\n            forecastday: data.forecast.forecastday,\n            time: data.location.localtime.slice(11, 17),\n            date: data.location.localtime.slice(0, 11),\n            humidity: data.current.humidity,\n            wind: data.current.wind_kph\n          });\n        })\n        .catch(err => {\n          if (err) console.error(\"Cannot fetch Weather Data from API\", err);\n        });\n    }\n  }\n\n  render() {\n    const {\n      isLoading,\n      cityName,\n      numForecastDay,\n      temp_c,\n      iconUrl,\n      humidity,\n      wind,\n      forecastday,\n      time,\n      date,\n      buttonToday,\n      buttonForecast\n    } = this.state;\n    return (\n      <>\n        {isLoading ? (\n          <div className={s.wrap}>\n            <div className={s.wrapLoader}>\n              <Loader\n                type=\"Circles\"\n                color=\"black\"\n                height={80}\n                width={80}\n                margin=\"100px\"\n              />\n            </div>\n          </div>\n        ) : (\n          <div className={s.mainConteiner}>\n            <div className={s.header}>\n              <InputCurrent\n                changeValue={this.handleChange}\n                sendValue={this.handleSubmit}\n              />\n\n              <CurrentLocation city={cityName} time={time} date={date} />\n            </div>\n            <Tab\n              buttonForecast={buttonForecast}\n              buttonToday={buttonToday}\n              onButtonToday={this.handleButtonToday}\n              onButtonForecast={this.handleButtonForecast}\n              forecast={forecastday}\n              currentIcon={iconUrl}\n              currentTemp={temp_c}\n              humidity={humidity}\n              wind={wind}\n            />\n          </div>\n        )}\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./Components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}